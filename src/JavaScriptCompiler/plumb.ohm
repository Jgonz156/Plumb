Plumb {
     Program = ("\n")* Import* ("\n")* Definitions? ("\n")* Pipelines? ("\n")* end
    Import = ("\n")* "import" string ("\n")*
    Definitions = definition Block
    Block = "{" Statement* "}" ("\n")*
    Statement = ("\n")* Statement ("\n")* -- Newlines
    		  | VariableDec 
    		  | Assignment 
              | FunctionDec 
              | PrototypeDec 
              | AttributeDec 
              | MethodDec
              | ConstructorDec
              | IfStatement 
              | WhileStatement 
              | ForStatement 
              | ReturnStatement 
              | EmptyReturnStatement 
              | ContinueStatement
              | BreakStatement
              | Exp7
    VariableDec = prototype id assignment Expression
    Assignment = (self ".")? id assignment Expression
    FunctionDec = prototype function id "(" ListOf<TypeParameterPairDec, ","> ")" Block
    TypeParameterPairDec = prototype id
    PrototypeDec = "PROTO" prototype Block
    AttributeDec = "ATR" prototype id assignment? Expression?
    MethodDec = "ATR" prototype function id "(" ListOf<TypeParameterPairDec, ","> ")" Block
    ConstructorDec = prototype function prototype "(" ListOf<TypeParameterPairDec, ","> ")" Block
    IfStatement = if "(" Expression ")" Block
    WhileStatement = while "(" Expression ")" Block
    ForStatement = for "(" Statement ":" Expression ":" Statement ")" Block
    ReturnStatement = return Expression
    EmptyReturnStatement = return
    ContinueStatement = continue
    BreakStatement = break
    ListLit = "#" prototype "#" "||" ListOf<Expression, ",">  "||"
    MapLit = "#" prototype "#" "<<" ListOf<KeyValuePair, ","> ">>"
    KeyValuePair = string ":" Expression
    Expression = Exp1 "or" Exp1 -- BooleanOR
    	       | Exp1
    Exp1 = Exp2 "and" Exp2 -- BooleanAND
    	 | Exp2
    Exp2 = Exp3 ( "==" | "!=" ) Exp3 -- BooleanEquality
         | Exp3
    Exp3 = Exp4 ( "<=" | ">=" | "<" | ">"  ) Exp4 -- BooleanConditionals
    	 | Exp4
    Exp4 = Exp4 ( "+" | "-" ) Exp5 -- AdditionSubtraction
    	 | Exp5
    Exp5 = Exp5 ( "*" | "/" | "%" ) Exp6 -- MultiplicationDivisionModulus
    	 | Exp6
    Exp6 = Exp7 "^" Exp6 -- Exponentiation
    	 | Exp7
         | ("!" | "-") Exp7 -- Negation
    Exp7 = Exp7 "[" Expression "]" -- Index
    		  | Exp7 "(" ListOf<Expression, ","> ")" -- Call
              | Exp7 "." id "(" ListOf<Expression, ","> ")"  -- Method
              | Exp7 "." id -- Access
              | Exp8
    Exp8 = rational
    	 | integer
    	 | boolean
         | string
         | self 
         | doesnotexist
         | prototype
         | id 
         | ListLit
         | MapLit
         | "(" Expression ")" -- Expression
    string = "\"" char* "\""
    char = ~keyword ~"::" ~"\"" any
    continue = "continue" ~idchar
    break = "break" ~idchar
    self = "self" ~idchar
    doesnotexist = (none | all)
    none = "none" ~idchar
    all = "all" ~idchar
    function = "FUNC" ~idchar
    definition = "Definitions" ~idchar
    pipeline = "Pipelines" ~idchar
    while = "while" ~idchar
    for = "for" ~idchar
    if = "if" ~idchar
    return = "return" ~idchar
    boolean = (true | false)
    true = "true" ~idchar
    false = "false" ~idchar
    op = "OP" ~idchar
    assignment = "<==" | "<++" | "<--" | "<**" | "<//" | "<%%"
    prototype = upper+
    		  | "||" prototype "||" -- ListProto
              | "<<" prototype ">>" -- MapProto
    id = ~keyword (lower|unicodeLtmo) idchar*
    idchar = letter | digit | "_"
    keyword = continue | break | self | none | all | function | while | for | if | return | prototype | true | false | definition | pipeline | op
    rational = digit+ ("." digit+)? (("E" | "e") ("+" | "-")? digit+)?
    integer = digit+ 
    space := ( " " | "\t" | "\r" ) | "::" (~"::" any)* "::" -- Comment
    Pipelines = pipeline "{" PipeDec* "}"
    PipeDec = ("\n")* PipeDec ("\n")* -- Newlines
    	 | NonemptyListOf<Exp8, ","> injection (PipeDec | id) -- Injection
    	 | NonemptyListOf<Exp8, ","> drain (PipeDec | id) -- Drain
         | NonemptyListOf<Exp8, ","> caster (PipeDec | id) -- Caster
         | NonemptyListOf<Exp8, ","> factory PipeDec -- Factory
    injection = "-->" 
    drain = "-" ( ( id | integer ) "-")+ ">"
    caster = "-(" (prototype | id) ")->"
    factory	= "--<("
}