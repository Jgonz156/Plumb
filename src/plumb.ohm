Plumb {
	Program = ("\n")* Import* ("\n")* Definitions? ("\n")* Pipelines? ("\n")* end
    Import = ("\n")* "import" string ("\n")*
    Definitions = definition Block
    Statement = ("\n")* Statement ("\n")* -- Newlines
    		  | VariableDec 
    		  | Assignment 
              | FunctionDec 
              | PrototypeDec 
              | AttributeDec 
              | IfStatement 
              | WhileStatement 
              | ForStatement 
              | ReturnStatement 
              | ListDec 
              | MapDec 
              | Exp7
    VariableDec = (prototype | id) id assignment Expression
    Assignment = (self".")? id assignment Expression
    FunctionDec = (prototype | id) function id "(" ListOf<typeParameterPair, ","> ")" Block
    typeParameterPair = (prototype|id) space id
    PrototypeDec = "PROTO" id Block
    AttributeDec = "ATR" (prototype | id) id (assignment Expression)?
    MethodDec = "ATR" (prototype | id) function id "(" ListOf<typeParameterPair, ","> ")" Block
    IfStatement = if "(" Expression ")" Block
    WhileStatement = while "(" Expression ")" Block
    ForStatement = for "(" Statement ":" Expression ":" Statement ")" Block
    ReturnStatement = return Expression
    ListDec = (prototype | id) id assignment "||" ListOf<Expression, ",">  "||"
    MapDec = (prototype | id) id assignment "<<" ListOf<KeyValuePair, ","> ">>"
    KeyValuePair = Expression ":" Expression
    Block = "{" Statement* "}" ("\n")*
    Expression = Exp1 "or" Exp1 -- BooleanOR
    	       | Exp1
    Exp1 = Exp2 "and" Exp2 -- BooleanAND
    	 | Exp2
    Exp2 = Exp3 ( "==" | "!=" ) Exp3 -- BooleanEquality
         | Exp3
    Exp3 = Exp4 ( "<=" | ">=" | "<" | ">"  ) Exp4 -- BooleanConditionals
    	 | Exp4
    Exp4 = Exp4 ( "+" | "-" ) Exp5 -- AdditionSubtraction
    	 | Exp5
    Exp5 = Exp5 ( "*" | "/" | "%" ) Exp6 -- MultiplicationDivisionModulus
    	 | Exp6
    Exp6 = Exp7 "^" Exp6 -- Exponentiation
    	 | Exp7
         | ("!" | "-") Exp7 -- Negation
    Exp7 = Exp7 "[" Expression "]" -- Index
    		  | Exp7 "(" ListOf<Expression, ","> ")" -- Call
              | Exp7 "." id "(" ListOf<Expression, ","> ")"  -- Method
              | Exp7 "." id -- Attribute
              | Exp8
    Exp8 = rational
    	 | integer
    	 | boolean
         | string
         | self																														
         | id 
         | "(" Expression ")" -- Expression
    string = "\"" char* "\""
    char = ~keyword ~"::" ~"\"" any
    self = "self" ~idchar
    function = "FUNC" ~idchar
    definition = "Definitions" ~idchar
    pipeline = "Pipelines" ~idchar
    while = "while" ~idchar
    for = "for" ~idchar
    if = "if" ~idchar
    return = "return" ~idchar
    boolean = (true | false)
    true = "true" ~idchar
    false = "false" ~idchar
    op = "OP" ~idchar
    assignment = "<==" | "<++" | "<--" | "<**" | "<//" | "<%%"
    prototype = "INT" | "STR" | "RAT" | "BOOL" | "DNE" 
    		  | "||" prototype "||" -- ListProto
              | "<<" prototype ">>" -- MapProto
    id = ~keyword letter idchar*
    idchar = letter | digit | "_"
    keyword = function | while | for | if | return | prototype | true | false | definition | pipeline | op
    rational = digit+ ("." digit+) (("E" | "e") ("+" | "-")? digit+)?
    integer = digit+ 
    space := ( " " | "\t" | "\r" ) | "::" (~"::" any)* "::" -- Comment
    Pipelines = pipeline "{" Pipe* "}"
    Pipe = ("\n")* Pipe ("\n")* -- Newlines
    	 | NonemptyListOf<Exp8, ","> injection (Pipe | id) -- Injection
    	 | NonemptyListOf<Exp8, ","> drain (Pipe | id) -- Drain
         | NonemptyListOf<Exp8, ","> caster (Pipe | id) -- Caster
         | NonemptyListOf<Exp8, ","> factory Pipe -- Factory
    injection = "-->" 
    drain = "-" ( ( id | integer ) "-")+ ">"
    caster = "-(" (prototype | id) ")->"
    factory	= "--<("
}